{
  "name": "xlsx",
  "version": "0.9.3",
  "author": {
    "name": "sheetjs"
  },
  "description": "Excel (XLSB/XLSX/XLSM/XLS/XML) and ODS (ODS/FODS/UOS) spreadsheet parser and writer",
  "keywords": [
    "excel",
    "xls",
    "xlsx",
    "xlsb",
    "xlsm",
    "ods",
    "office",
    "spreadsheet"
  ],
  "bin": {
    "xlsx": "./bin/xlsx.njs"
  },
  "main": "./xlsx",
  "browser": {
    "node": false,
    "crypto": false,
    "fs": false
  },
  "dependencies": {
    "exit-on-epipe": "~1.0.0",
    "ssf": "~0.8.1",
    "codepage": "~1.7.0",
    "cfb": "~0.11.0",
    "crc-32": "~1.0.0",
    "adler-32": "~1.0.0",
    "commander": "~2.9.0"
  },
  "devDependencies": {
    "mocha": "",
    "xlsjs": "",
    "uglify-js": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-xlsx.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make travis"
  },
  "config": {
    "blanket": {
      "pattern": "xlsx.js"
    }
  },
  "homepage": "https://oss.sheetjs.com/js-xlsx/",
  "bugs": {
    "url": "https://github.com/SheetJS/js-xlsx/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# xlsx\n\nParser and writer for various spreadsheet formats.  Pure-JS cleanroom\nimplementation from official specifications, related documents, and test files.\nEmphasis on parsing and writing robustness, cross-format feature compatibility\nwith a unified JS representation, and ES3/ES5 browser compatibility back to IE6.\n\n[**In-Browser Demo**](http://oss.sheetjs.com/js-xlsx)\n\n[**Source Code**](http://git.io/xlsx)\n\n[**Commercial Support**](http://sheetjs.com/reinforcements)\n\n[**File format support for known spreadsheet data formats:**](#file-formats)\n\n![circo graph of format support](formats.png)\n\n\n\n## Table of Contents\n\n<!-- toc -->\n\n- [Installation](#installation)\n  * [JS Ecosystem Demos](#js-ecosystem-demos)\n  * [Optional Modules](#optional-modules)\n  * [ECMAScript 5 Compatibility](#ecmascript-5-compatibility)\n- [Parsing Workbooks](#parsing-workbooks)\n- [Working with the Workbook](#working-with-the-workbook)\n- [Writing Workbooks](#writing-workbooks)\n- [Interface](#interface)\n  * [Parsing functions](#parsing-functions)\n  * [Writing functions](#writing-functions)\n  * [Utilities](#utilities)\n- [Workbook / Worksheet / Cell Object Description](#workbook--worksheet--cell-object-description)\n  * [General Structures](#general-structures)\n  * [Cell Object](#cell-object)\n  * [Data Types](#data-types)\n  * [Formulae](#formulae)\n  * [Worksheet Object](#worksheet-object)\n  * [Workbook Object](#workbook-object)\n- [Parsing Options](#parsing-options)\n  * [Input Type](#input-type)\n  * [Guessing File Type](#guessing-file-type)\n- [Writing Options](#writing-options)\n  * [Supported Output Formats](#supported-output-formats)\n  * [Output Type](#output-type)\n- [Utility Functions](#utility-functions)\n  * [Formulae Output](#formulae-output)\n  * [CSV and general DSV Output](#csv-and-general-dsv-output)\n  * [JSON](#json)\n- [File Formats](#file-formats)\n  * [Excel 2007+ XML (XLSX/XLSM)](#excel-2007-xml-xlsxxlsm)\n  * [Excel 2.0-95 (BIFF2/BIFF3/BIFF4/BIFF5)](#excel-20-95-biff2biff3biff4biff5)\n  * [Excel 97-2004 Binary (BIFF8)](#excel-97-2004-binary-biff8)\n  * [Excel 2003-2004 (SpreadsheetML)](#excel-2003-2004-spreadsheetml)\n  * [Excel 2007+ Binary (XLSB, BIFF12)](#excel-2007-binary-xlsb-biff12)\n  * [OpenDocument Spreadsheet (ODS/FODS) and Uniform Office Spreadsheet (UOS1/2)](#opendocument-spreadsheet-odsfods-and-uniform-office-spreadsheet-uos12)\n  * [Comma-Separated Values](#comma-separated-values)\n  * [HTML](#html)\n- [Testing](#testing)\n  * [Tested Environments](#tested-environments)\n  * [Test Files](#test-files)\n- [Contributing](#contributing)\n- [License](#license)\n- [References](#references)\n- [Badges](#badges)\n\n<!-- tocstop -->\n\n## Installation\n\nWith [npm](https://www.npmjs.org/package/xlsx):\n\n```bash\n$ npm install xlsx\n```\n\nIn the browser:\n\n```html\n<script lang=\"javascript\" src=\"dist/xlsx.core.min.js\"></script>\n```\n\nWith [bower](http://bower.io/search/?q=js-xlsx):\n\n```bash\n$ bower install js-xlsx\n```\n\nCDNjs automatically pulls the latest version and makes all versions available at\n<http://cdnjs.com/libraries/xlsx>\n\n### JS Ecosystem Demos\n\nThe `demos` directory includes sample projects for:\n\n- [`browserify`](http://browserify.org/)\n- [`requirejs`](http://requirejs.org/)\n- [`webpack`](https://webpack.js.org/)\n\n### Optional Modules\n\nThe node version automatically requires modules for additional features.  Some\nof these modules are rather large in size and are only needed in special\ncircumstances, so they do not ship with the core.  For browser use, they must\nbe included directly:\n\n```html\n<!-- international support from js-codepage -->\n<script src=\"dist/cpexcel.js\"></script>\n```\n\nAn appropriate version for each dependency is included in the dist/ directory.\n\nThe complete single-file version is generated at `dist/xlsx.full.min.js`\n\nWebpack and browserify builds include optional modules by default.  Webpack can\nbe configured to remove support with `resolve.alias`:\n\n```js\n  /* uncomment the lines below to remove support */\n  resolve: {\n    alias: { \"./dist/cpexcel.js\": \"\" } // <-- omit international support\n  }\n```\n\n\n### ECMAScript 5 Compatibility\n\nSince xlsx.js uses ES5 functions like `Array#forEach`, older browsers require\n[Polyfills](http://git.io/QVh77g).  This repo and the gh-pages branch include\n[a shim](https://github.com/SheetJS/js-xlsx/blob/master/shim.js)\n\nTo use the shim, add the shim before the script tag that loads xlsx.js:\n\n```html\n<script type=\"text/javascript\" src=\"/path/to/shim.js\"></script>\n```\n\n## Parsing Workbooks\n\nFor parsing, the first step is to read the file.  This involves acquiring the\ndata and feeding it into the library.  Here are a few common scenarios:\n\n- node readFile:\n\n```js\nif(typeof require !== 'undefined') XLSX = require('xlsx');\nvar workbook = XLSX.readFile('test.xlsx');\n/* DO SOMETHING WITH workbook HERE */\n```\n\n- ajax (for a more complete example that works in older browsers, check the demo\n  at <http://oss.sheetjs.com/js-xlsx/ajax.html>):\n\n```js\n/* set up XMLHttpRequest */\nvar url = \"test_files/formula_stress_test_ajax.xlsx\";\nvar oReq = new XMLHttpRequest();\noReq.open(\"GET\", url, true);\noReq.responseType = \"arraybuffer\";\n\noReq.onload = function(e) {\n  var arraybuffer = oReq.response;\n\n  /* convert data to binary string */\n  var data = new Uint8Array(arraybuffer);\n  var arr = new Array();\n  for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);\n  var bstr = arr.join(\"\");\n\n  /* Call XLSX */\n  var workbook = XLSX.read(bstr, {type:\"binary\"});\n\n  /* DO SOMETHING WITH workbook HERE */\n}\n\noReq.send();\n```\n\n- HTML5 drag-and-drop using readAsBinaryString or readAsArrayBuffer:\n  note: readAsBinaryString and readAsArrayBuffer may not be available in every\n  browser.  Use dynamic feature tests to determine which method to use.\n\n```js\n/* processing array buffers, only required for readAsArrayBuffer */\nfunction fixdata(data) {\n  var o = \"\", l = 0, w = 10240;\n  for(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));\n  o+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));\n  return o;\n}\n\nvar rABS = true; // true: readAsBinaryString ; false: readAsArrayBuffer\n/* set up drag-and-drop event */\nfunction handleDrop(e) {\n  e.stopPropagation();\n  e.preventDefault();\n  var files = e.dataTransfer.files;\n  var i,f;\n  for (i = 0; i != files.length; ++i) {\n    f = files[i];\n    var reader = new FileReader();\n    var name = f.name;\n    reader.onload = function(e) {\n      var data = e.target.result;\n\n      var workbook;\n      if(rABS) {\n        /* if binary string, read with type 'binary' */\n        workbook = XLSX.read(data, {type: 'binary'});\n      } else {\n        /* if array buffer, convert to base64 */\n        var arr = fixdata(data);\n        workbook = XLSX.read(btoa(arr), {type: 'base64'});\n      }\n\n      /* DO SOMETHING WITH workbook HERE */\n    };\n    if(rABS) reader.readAsBinaryString(f);\n    else reader.readAsArrayBuffer(f);\n  }\n}\ndrop_dom_element.addEventListener('drop', handleDrop, false);\n```\n\n- HTML5 input file element using readAsBinaryString or readAsArrayBuffer:\n\n```js\n/* fixdata and rABS are defined in the drag and drop example */\nfunction handleFile(e) {\n  var files = e.target.files;\n  var i,f;\n  for (i = 0; i != files.length; ++i) {\n    f = files[i];\n    var reader = new FileReader();\n    var name = f.name;\n    reader.onload = function(e) {\n      var data = e.target.result;\n\n      var workbook;\n      if(rABS) {\n        /* if binary string, read with type 'binary' */\n        workbook = XLSX.read(data, {type: 'binary'});\n      } else {\n        /* if array buffer, convert to base64 */\n        var arr = fixdata(data);\n        workbook = XLSX.read(btoa(arr), {type: 'base64'});\n      }\n\n      /* DO SOMETHING WITH workbook HERE */\n    };\n    reader.readAsBinaryString(f);\n  }\n}\ninput_dom_element.addEventListener('change', handleFile, false);\n```\n\n## Working with the Workbook\n\nThe full object format is described later in this README.\n\nThis example extracts the value stored in cell A1 from the first worksheet:\n\n```js\nvar first_sheet_name = workbook.SheetNames[0];\nvar address_of_cell = 'A1';\n\n/* Get worksheet */\nvar worksheet = workbook.Sheets[first_sheet_name];\n\n/* Find desired cell */\nvar desired_cell = worksheet[address_of_cell];\n\n/* Get the value */\nvar desired_value = (desired_cell ? desired_cell.v : undefined);\n```\n\n**Complete examples:**\n\n- <http://oss.sheetjs.com/js-xlsx/> HTML5 File API / Base64 Text / Web Workers\n\nNote that older versions of IE do not support HTML5 File API, so the base64 mode\nis used for testing.  On OSX you can get the base64 encoding with:\n\n```bash\n$ <target_file base64 | pbcopy\n```\n\nOn Windows XP and up you can get the base64 encoding using `certutil`:\n\n```cmd\n> certutil -encode target_file target_file.b64\n```\n\n(note: You have to open the file and remove the header and footer lines)\n\n- <http://oss.sheetjs.com/js-xlsx/ajax.html> XMLHttpRequest\n\n- <https://github.com/SheetJS/js-xlsx/blob/master/bin/xlsx.njs> node\n\nThe node version installs a command line tool `xlsx` which can read spreadsheet\nfiles and output the contents in various formats.  The source is available at\n`xlsx.njs` in the bin directory.\n\nSome helper functions in `XLSX.utils` generate different views of the sheets:\n\n- `XLSX.utils.sheet_to_csv` generates CSV\n- `XLSX.utils.sheet_to_json` generates an array of objects\n- `XLSX.utils.sheet_to_formulae` generates a list of formulae\n\n## Writing Workbooks\n\nFor writing, the first step is to generate output data.  The helper functions\n`write` and `writeFile` will produce the data in various formats suitable for\ndissemination.  The second step is to actual share the data with the end point.\nAssuming `workbook` is a workbook object:\n\n- nodejs write to file:\n\n```js\n/* output format determined by filename */\nXLSX.writeFile(workbook, 'out.xlsx');\n/* at this point, out.xlsx is a file that you can distribute */\n```\n\n- browser generate binary blob and \"download\" to client\n  (using [FileSaver.js](https://github.com/eligrey/FileSaver.js/) for download):\n\n```js\n/* bookType can be 'xlsx' or 'xlsm' or 'xlsb' or 'ods' */\nvar wopts = { bookType:'xlsx', bookSST:false, type:'binary' };\n\nvar wbout = XLSX.write(workbook,wopts);\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n  for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n  return buf;\n}\n\n/* the saveAs call downloads a file on the local machine */\nsaveAs(new Blob([s2ab(wbout)],{type:\"application/octet-stream\"}), \"test.xlsx\");\n```\n\n**Complete examples:**\n\n- <http://sheetjs.com/demos/writexlsx.html> generates a simple file\n- <http://git.io/WEK88Q> writing an array of arrays in nodejs\n- <http://sheetjs.com/demos/table.html> exporting an HTML table\n\n## Interface\n\n`XLSX` is the exposed variable in the browser and the exported node variable\n\n`XLSX.version` is the version of the library (added by the build script).\n\n`XLSX.SSF` is an embedded version of the [format library](http://git.io/ssf).\n\n### Parsing functions\n\n`XLSX.read(data, read_opts)` attempts to parse `data`.\n\n`XLSX.readFile(filename, read_opts)` attempts to read `filename` and parse.\n\nParse options are described in the [Parsing Options](#parsing-options) section.\n\n### Writing functions\n\n`XLSX.write(wb, write_opts)` attempts to write the workbook `wb`\n\n`XLSX.writeFile(wb, filename, write_opts)` attempts to write `wb` to `filename`\n\nWrite options are described in the [Writing Options](#writing-options) section.\n\n### Utilities\n\nUtilities are available in the `XLSX.utils` object:\n\n**Exporting:**\n\n- `sheet_to_json` converts a worksheet object to an array of JSON objects.\n  `sheet_to_row_object_array` is an alias that will be removed in the future.\n- `sheet_to_csv` generates delimiter-separated-values output.\n- `sheet_to_formulae` generates a list of the formulae (with value fallbacks).\n\nExporters are described in the [Utility Functions](#utility-functions) section.\n\n\n**Cell and cell address manipulation:**\n\n- `format_cell` generates the text value for a cell (using number formats)\n- `{en,de}code_{row,col}` convert between 0-indexed rows/cols and A1 forms.\n- `{en,de}code_cell` converts cell addresses\n- `{en,de}code_range` converts cell ranges\n\n## Workbook / Worksheet / Cell Object Description\n\njs-xlsx conforms to the Common Spreadsheet Format (CSF):\n\n### General Structures\n\nCell address objects are stored as `{c:C, r:R}` where `C` and `R` are 0-indexed\ncolumn and row numbers, respectively.  For example, the cell address `B5` is\nrepresented by the object `{c:1, r:4}`.\n\nCell range objects are stored as `{s:S, e:E}` where `S` is the first cell and\n`E` is the last cell in the range.  The ranges are inclusive.  For example, the\nrange `A3:B7` is represented by the object `{s:{c:0, r:2}, e:{c:1, r:6}}`. Utils\nuse the following pattern to walk each of the cells in a range:\n\n```js\nfor(var R = range.s.r; R <= range.e.r; ++R) {\n  for(var C = range.s.c; C <= range.e.c; ++C) {\n    var cell_address = {c:C, r:R};\n  }\n}\n```\n\n### Cell Object\n\n| Key | Description                                                            |\n| --- | ---------------------------------------------------------------------- |\n| `v` | raw value (see Data Types section for more info)                       |\n| `w` | formatted text (if applicable)                                         |\n| `t` | cell type: `b` Boolean, `n` Number, `e` error, `s` String, `d` Date    |\n| `f` | cell formula encoded as an A1-style string (if applicable)             |\n| `F` | range of enclosing array if formula is array formula (if applicable)   |\n| `r` | rich text encoding (if applicable)                                     |\n| `h` | HTML rendering of the rich text (if applicable)                        |\n| `c` | comments associated with the cell                                      |\n| `z` | number format string associated with the cell (if requested)           |\n| `l` | cell hyperlink object (.Target holds link, .tooltip is tooltip)        |\n| `s` | the style/theme of the cell (if applicable)                            |\n\nBuilt-in export utilities (such as the CSV exporter) will use the `w` text if it\nis available.  To change a value, be sure to delete `cell.w` (or set it to\n`undefined`) before attempting to export.  The utilities will regenerate the `w`\ntext from the number format (`cell.z`) and the raw value if possible.\n\nThe actual array formula is stored in the `f` field of the first cell in the\narray range.  Other cells in the range will omit the `f` field.\n\n### Data Types\n\nThe raw value is stored in the `v` field, interpreted based on the `t` field.\n\nType `b` is the Boolean type.  `v` is interpreted according to JS truth tables.\n\nType `e` is the Error type. `v` holds the number and `w` holds the common name:\n\n|  Value | Error Meaning   |\n| -----: | :-------------- |\n| `0x00` | `#NULL!`        |\n| `0x07` | `#DIV/0!`       |\n| `0x0F` | `#VALUE!`       |\n| `0x17` | `#REF!`         |\n| `0x1D` | `#NAME?`        |\n| `0x24` | `#NUM!`         |\n| `0x2A` | `#N/A`          |\n| `0x2B` | `#GETTING_DATA` |\n\nType `n` is the Number type. This includes all forms of data that Excel stores\nas numbers, such as dates/times and Boolean fields.  Excel exclusively uses data\nthat can be fit in an IEEE754 floating point number, just like JS Number, so the\n`v` field holds the raw number.  The `w` field holds formatted text.\n\nType `d` is the Date type, generated only when the option `cellDates` is passed.\nSince JSON does not have a natural Date type, parsers are generally expected to\nstore ISO 8601 Date strings like you would get from `date.toISOString()`.  On\nthe other hand, writers and exporters should be able to handle date strings and\nJS Date objects.  Note that Excel disregards timezone modifiers and treats all\ndates in the local timezone.  js-xlsx does not correct for this error.\n\nType `s` is the String type.  `v` should be explicitly stored as a string to\navoid possible confusion.\n\nType `z` represents blank stub cells.  These do not have any data or type, and\nare not processed by any of the core library functions.  By default these cells\nwill not be generated; the parser `sheetStubs` option must be set to `true`.\n\n### Formulae\n\nThe A1-style formula string is stored in the `f` field.  Even though different\nfile formats store the formulae in different ways, the formats are converted.\n\nShared formulae are decompressed and each cell has the correct formula.\n\nArray formulae are stored in the top-left cell of the array block.  All cells\nof an array formula have a `F` field corresponding to the range.  A single-cell\nformula can be distinguished from a plain formula by the presence of `F` field.\n\nThe `sheet_to_formulae` method generates one line per formula or array formula.\nArray formulae are rendered in the form `range=formula` while plain cells are\nrendered in the form `cell=formula or value`.\n\n### Worksheet Object\n\nEach key that does not start with `!` maps to a cell (using `A-1` notation)\n\n`worksheet[address]` returns the cell object for the specified address.\n\nSpecial worksheet keys (accessible as `worksheet[key]`, each starting with `!`):\n\n- `ws['!ref']`: A-1 based range representing the worksheet range. Functions that\n  work with sheets should use this parameter to determine the range.  Cells that\n  are assigned outside of the range are not processed.  In particular, when\n  writing a worksheet by hand, be sure to update the range.  For a longer\n  discussion, see <http://git.io/KIaNKQ>\n\n  Functions that handle worksheets should test for the presence of `!ref` field.\n  If the `!ref` is omitted or is not a valid range, functions are free to treat\n  the sheet as empty or attempt to guess the range.  The standard utilities that\n  ship with this library treat sheets as empty (for example, the CSV output is\n  empty string).\n\n  When reading a worksheet with the `sheetRows` property set, the ref parameter\n  will use the restricted range.  The original range is set at `ws['!fullref']`\n\n- `ws['!cols']`: array of column properties objects.  Column widths are actually\n  stored in files in a normalized manner, measured in terms of the \"Maximum\n  Digit Width\" (the largest width of the rendered digits 0-9, in pixels).  When\n  parsed, the column objects store the pixel width in the `wpx` field, character\n  width in the `wch` field, and the maximum digit width in the `MDW` field.\n\n- `ws['!merges']`: array of range objects corresponding to the merged cells in\n  the worksheet.  Plaintext utilities are unaware of merge cells.  CSV export\n  will write all cells in the merge range if they exist, so be sure that only\n  the first cell (upper-left) in the range is set.\n\n### Workbook Object\n\n`workbook.SheetNames` is an ordered list of the sheets in the workbook\n\n`wb.Sheets[sheetname]` returns an object representing the worksheet.\n\n`wb.Props` is an object storing the standard properties.  `wb.Custprops` stores\ncustom properties.  Since the XLS standard properties deviate from the XLSX\nstandard, XLS parsing stores core properties in both places.  .\n\n\n## Parsing Options\n\nThe exported `read` and `readFile` functions accept an options argument:\n\n| Option Name | Default | Description                                          |\n| :---------- | ------: | :--------------------------------------------------- |\n| type        |         | Input data encoding (see Input Type below)           |\n| cellFormula | true    | Save formulae to the .f field **                     |\n| cellHTML    | true    | Parse rich text and save HTML to the .h field        |\n| cellNF      | false   | Save number format string to the .z field            |\n| cellStyles  | false   | Save style/theme info to the .s field                |\n| cellDates   | false   | Store dates as type `d` (default is `n`) **          |\n| sheetStubs  | false   | Create cell objects of type `z` for stub cells       |\n| sheetRows   | 0       | If >0, read the first `sheetRows` rows **            |\n| bookDeps    | false   | If true, parse calculation chains                    |\n| bookFiles   | false   | If true, add raw files to book object **             |\n| bookProps   | false   | If true, only parse enough to get book metadata **   |\n| bookSheets  | false   | If true, only parse enough to get the sheet names    |\n| bookVBA     | false   | If true, expose vbaProject.bin to `vbaraw` field **  |\n| password    | \"\"      | If defined and file is encrypted, use password **    |\n| WTF         | false   | If true, throw errors on unexpected file features ** |\n\n- `cellFormula` option only applies to formats that require extra processing to\n  parse formulae (XLS/XLSB).\n- Even if `cellNF` is false, formatted text will be generated and saved to `.w`\n- In some cases, sheets may be parsed even if `bookSheets` is false.\n- `bookSheets` and `bookProps` combine to give both sets of information\n- `Deps` will be an empty object if `bookDeps` is falsy\n- `bookFiles` behavior depends on file type:\n    * `keys` array (paths in the ZIP) for ZIP-based formats\n    * `files` hash (mapping paths to objects representing the files) for ZIP\n    * `cfb` object for formats using CFB containers\n- `sheetRows-1` rows will be generated when looking at the JSON object output\n  (since the header row is counted as a row when parsing the data)\n- `bookVBA` merely exposes the raw vba object.  It does not parse the data.\n- `cellDates` currently does not convert numerical dates to JS dates.\n- Currently only XOR encryption is supported.  Unsupported error will be thrown\n  for files employing other encryption methods.\n- WTF is mainly for development.  By default, the parser will suppress read\n  errors on single worksheets, allowing you to read from the worksheets that do\n  parse properly. Setting `WTF:1` forces those errors to be thrown.\n\nThe defaults are enumerated in bits/84\\_defaults.js\n\n### Input Type\n\nStrings can be interpreted in multiple ways.  The `type` parameter for `read`\ntells the library how to parse the data argument:\n\n| `type`     | expected input                                                  |\n|------------|-----------------------------------------------------------------|\n| `\"base64\"` | string: base64 encoding of the file                             |\n| `\"binary\"` | string:  binary string (`n`-th byte is `data.charCodeAt(n)`)    |\n| `\"buffer\"` | nodejs Buffer                                                   |\n| `\"array\"`  | array: array of 8-bit unsigned int (`n`-th byte is `data[n]`)   |\n| `\"file\"`   | string: filename that will be read and processed (nodejs only)  |\n\n### Guessing File Type\n\nExcel and other spreadsheet tools read the first few bytes and apply other\nheuristics to determine a file type.  This enables file type punning: renaming\nfiles with the `.xls` extension will tell your computer to use Excel to open the\nfile but Excel will know how to handle it.  This library applies similar logic:\n\n| Byte 0 | Raw File Type | Spreadsheet Types                                   |\n|:-------|:--------------|:----------------------------------------------------|\n| `0xD0` | CFB Container | BIFF 5/8 or password-protected XLSX/XLSB            |\n| `0x09` | BIFF Stream   | BIFF 2/3/4/5                                        |\n| `0x3C` | XML/HTML      | SpreadsheetML or Flat ODS or UOS1 or HTML           |\n| `0x50` | ZIP Archive   | XLSB or XLSX/M or ODS or UOS2                       |\n| `0xFE` | UTF8 Text     | SpreadsheetML or Flat ODS or UOS1                   |\n\n## Writing Options\n\nThe exported `write` and `writeFile` functions accept an options argument:\n\n| Option Name |  Default | Description                                         |\n| :---------- | -------: | :-------------------------------------------------- |\n| type        |          | Output data encoding (see Output Type below)        |\n| cellDates   |  `false` | Store dates as type `d` (default is `n`)            |\n| bookSST     |  `false` | Generate Shared String Table **                     |\n| bookType    | `\"xlsx\"` | Type of Workbook (see below for supported formats)  |\n| sheet       |     `\"\"` | Name of Worksheet for single-sheet formats **       |\n| compression |  `false` | Use ZIP compression for ZIP-based formats **        |\n\n- `bookSST` is slower and more memory intensive, but has better compatibility\n  with older versions of iOS Numbers\n- The raw data is the only thing guaranteed to be saved.  Formulae, formatting,\n  and other niceties may not be serialized (pending CSF standardization)\n- `cellDates` only applies to XLSX output and is not guaranteed to work with\n  third-party readers.  Excel itself does not usually write cells with type `d`\n  so non-Excel tools may ignore the data or blow up in the presence of dates.\n\n### Supported Output Formats\n\nFor broad compatibility with third-party tools, this library supports many\noutput formats.  The specific file type is controlled with `bookType` option:\n\n| bookType | file ext | container | sheets | Description                       |\n| :------- | -------: | :-------: | :----- |:--------------------------------- |\n| `xlsx`   | `.xlsx`  |    ZIP    | multi  | Excel 2007+ XML Format            |\n| `xlsm`   | `.xlsm`  |    ZIP    | multi  | Excel 2007+ Macro XML Format      |\n| `xlsb`   | `.xlsb`  |    ZIP    | multi  | Excel 2007+ Binary Format         |\n| `ods`    | `.ods`   |    ZIP    | multi  | OpenDocument Spreadsheet          |\n| `biff2`  | `.xls`   |   none    | single | Excel 2.0 Worksheet format        |\n| `fods`   | `.fods`  |   none    | multi  | Flat OpenDocument Spreadsheet     |\n| `csv`    | `.csv`   |   none    | single | Comma Separated Values            |\n\n- `compression` only applies to formats with ZIP containers.\n- Formats that only support a single sheet require a `sheet` option specifying\n  the worksheet.  If the string is empty, the first worksheet is used.\n\n### Output Type\n\nThe `type` argument for `write` mirrors the `type` argument for `read`:\n\n| `type`     | output                                                          |\n|------------|-----------------------------------------------------------------|\n| `\"base64\"` | string: base64 encoding of the file                             |\n| `\"binary\"` | string:  binary string (`n`-th byte is `data.charCodeAt(n)`)    |\n| `\"buffer\"` | nodejs Buffer                                                   |\n| `\"file\"`   | string: name of file to be written (nodejs only)                |\n\n\n## Utility Functions\n\nThe `sheet_to_*` functions accept a worksheet and an optional options object.\n\nThe examples are based on the following worksheet:\n\n```\nXXX| A | B | C | D | E | F | G |\n---+---+---+---+---+---+---+---+\n 1 | S | h | e | e | t | J | S |\n 2 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n 3 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\n```\n\n### Formulae Output\n\n`XLSX.utils.sheet_to_formulae` generates an array of commands that represent\nhow a person would enter data into an application.  Each entry is of the form\n`A1-cell-address=formula-or-value`.  String literals are prefixed with a `'` in\naccordance with Excel.  For the example sheet:\n\n```js\n> var o = XLSX.utils.sheet_to_formulae(ws);\n> o.filter(function(v, i) { return i % 5 === 0; });\n[ 'A1=\\'S', 'F1=\\'J', 'D2=4', 'B3=3', 'G3=8' ]\n```\n\n### CSV and general DSV Output\n\nAs an alternative to the `writeFile` CSV type, `XLSX.utils.sheet_to_csv` also\nproduces CSV output.  The function takes an options argument:\n\n| Option Name |  Default | Description                                         |\n| :---------- | :------: | :-------------------------------------------------- |\n| FS          |  `\",\"`   | \"Field Separator\"  delimiter between fields         |\n| RS          |  `\"\\n\"`  | \"Record Separator\" delimiter between rows           |\n\nFor the example sheet:\n\n```js\n> console.log(XLSX.utils.sheet_to_csv(ws));\nS,h,e,e,t,J,S\n1,2,3,4,5,6,7\n2,3,4,5,6,7,8\n> console.log(XLSX.utils.sheet_to_csv(ws, {FS:\"\\t\"}));\nS\th\te\te\tt\tJ\tS\n1\t2\t3\t4\t5\t6\t7\n2\t3\t4\t5\t6\t7\t8\n> console.log(X.utils.sheet_to_csv(_ws,{FS:\":\",RS:\"|\"}));\nS:h:e:e:t:J:S|1:2:3:4:5:6:7|2:3:4:5:6:7:8|\n```\n\n### JSON\n\n`XLSX.utils.sheet_to_json` and the alias `XLSX.utils.sheet_to_row_object_array`\ngenerate different types of JS objects.  The function takes an options argument:\n\n| Option Name |  Default | Description                                         |\n| :---------- | :------: | :-------------------------------------------------- |\n| raw         | `false`  | Use raw values (true) or formatted strings (false)  |\n| range       | from WS  | Override Range (see table below)                    |\n| header      |          | Control output format (see table below)             |\n\n- `raw` only affects cells which have a format code (`.z`) field or a formatted\n  text (`.w`) field.\n- If `header` is specified, the first row is considered a data row; if `header`\n  is not specified, the first row is the header row and not considered data.\n- When `header` is not specified, the conversion will automatically disambiguate\n  header entries by affixing `_` and a count starting at `1`.  For example, if\n  three columns have header `foo` the output fields are `foo`, `foo_1`, `foo_2`\n\n`range` is expected to be one of:\n\n| `range`          | Description                                               |\n| :--------------- | :-------------------------------------------------------- |\n| (number)         | Use worksheet range but set starting row to the value     |\n| (string)         | Use specified range (A1-style bounded range string)       |\n| (default)        | Use worksheet range (`ws['!ref']`)                        |\n\n`header` is expected to be one of:\n\n| `header`         | Description                                               |\n| :--------------- | :-------------------------------------------------------- |\n| `1`              | Generate an array of arrays                               |\n| `\"A\"`            | Row object keys are literal column labels                 |\n| array of strings | Use specified strings as keys in row objects              |\n| (default)        | Read and disambiguate first row as keys                   |\n\nFor the example sheet:\n\n```js\n> console.log(X.utils.sheet_to_json(_ws));\n[ { S: 1, h: 2, e: 3, e_1: 4, t: 5, J: 6, S_1: 7 },\n  { S: 2, h: 3, e: 4, e_1: 5, t: 6, J: 7, S_1: 8 } ]\n\n> console.log(X.utils.sheet_to_json(_ws, {header:1}));\n[ [ 'S', 'h', 'e', 'e', 't', 'J', 'S' ],\n  [ 1, 2, 3, 4, 5, 6, 7 ],\n  [ 2, 3, 4, 5, 6, 7, 8 ] ]\n\n> console.log(X.utils.sheet_to_json(_ws, {header:\"A\"}));\n[ { A: 'S', B: 'h', C: 'e', D: 'e', E: 't', F: 'J', G: 'S' },\n  { A: 1, B: 2, C: 3, D: 4, E: 5, F: 6, G: 7 },\n  { A: 2, B: 3, C: 4, D: 5, E: 6, F: 7, G: 8 } ]\n> console.log(X.utils.sheet_to_json(_ws, {header:[\"A\",\"E\",\"I\",\"O\",\"U\",\"6\",\"9\"]}));\n[ { '6': 'J', '9': 'S', A: 'S', E: 'h', I: 'e', O: 'e', U: 't' },\n  { '6': 6, '9': 7, A: 1, E: 2, I: 3, O: 4, U: 5 },\n  { '6': 7, '9': 8, A: 2, E: 3, I: 4, O: 5, U: 6 } ]\n```\n\nExample showing the effect of `raw`:\n\n```js\n> _ws['A2'].w = \"1\";                         // set A2 formatted string value\n> console.log(X.utils.sheet_to_json(_ws, {header:1}));\n[ [ 'S', 'h', 'e', 'e', 't', 'J', 'S' ],\n  [ '1', 2, 3, 4, 5, 6, 7 ],                 // <-- A2 uses the formatted string\n  [ 2, 3, 4, 5, 6, 7, 8 ] ]\n> console.log(X.utils.sheet_to_json(_ws, {header:1, raw:true}));\n[ [ 'S', 'h', 'e', 'e', 't', 'J', 'S' ],\n  [ 1, 2, 3, 4, 5, 6, 7 ],                   // <-- A2 uses the raw value\n  [ 2, 3, 4, 5, 6, 7, 8 ] ]\n```\n\n## File Formats\n\nDespite the library name `xlsx`, it supports numerous spreadsheet file formats:\n\n| Format                                                       | Read  | Write |\n|:-------------------------------------------------------------|:-----:|:-----:|\n| **Excel Worksheet/Workbook Formats**                         |:-----:|:-----:|\n| Excel 2007+ XML Formats (XLSX/XLSM)                          |  :o:  |  :o:  |\n| Excel 2007+ Binary Format (XLSB BIFF12)                      |  :o:  |  :o:  |\n| Excel 2003-2004 XML Format (XML \"SpreadsheetML\")             |  :o:  |  :o:  |\n| Excel 97-2004 (XLS BIFF8)                                    |  :o:  |       |\n| Excel 5.0/95 (XLS BIFF5)                                     |  :o:  |       |\n| Excel 4.0 (XLS/XLW BIFF4)                                    |  :o:  |       |\n| Excel 3.0 (XLS BIFF3)                                        |  :o:  |       |\n| Excel 2.0/2.1 (XLS BIFF2)                                    |  :o:  |  :o:  |\n| **Excel Supported Text Formats**                             |:-----:|:-----:|\n| Delimiter-Separated Values (CSV/TSV/DSV)                     |       |  :o:  |\n| **Other Workbook/Worksheet Formats**                         |:-----:|:-----:|\n| OpenDocument Spreadsheet (ODS)                               |  :o:  |  :o:  |\n| Flat XML ODF Spreadsheet (FODS)                              |  :o:  |  :o:  |\n| Uniform Office Format Spreadsheet (标文通 UOS1/UOS2)         |  :o:  |       |\n| **Other Common Spreadsheet Output Formats**                  |:-----:|:-----:|\n| HTML Tables                                                  |  :o:  |       |\n\n### Excel 2007+ XML (XLSX/XLSM)\n\nXLSX and XLSM files are ZIP containers containing a series of XML files in\naccordance with the Open Packaging Conventions (OPC).  The XLSM filetype, almost\nidentical to XLSX, is used for files containing macros.\n\nThe format is standardized in ECMA-376 and later in ISO/IEC 29500.  Excel does\nnot follow the specification, and there are additional documents discussing how\nExcel deviates from the specification.\n\n### Excel 2.0-95 (BIFF2/BIFF3/BIFF4/BIFF5)\n\nBIFF 2/3 XLS are single-sheet streams of binary records.  Excel 4 introduced\nthe concept of a workbook (`XLW` files) but also had single-sheet `XLS` format.\nThe structure is largely similar to the Lotus 1-2-3 file formats.  BIFF5/8/12\nextended the format in various ways but largely stuck to the same record format.\n\nThere is no official specification for any of these formats.  Excel 95 can write\nfiles in these formats, so record lengths and fields were backsolved by writing\nin all of the supported formats and comparing files.  Excel 2016 can generate\nBIFF5 files, enabling a full suite of file tests starting from XLSX or BIFF2.\n\n### Excel 97-2004 Binary (BIFF8)\n\nBIFF8 exclusively uses the Compound File Binary container format, splitting some\ncontent into streams within the file.  At its core, it still uses an extended\nversion of the binary record format from older versions of BIFF.\n\nThe `MS-XLS` specification covers the basics of the file format, and other\nspecifications expand on serialization of features like properties.\n\n### Excel 2003-2004 (SpreadsheetML)\n\nPredating XLSX, SpreadsheetML files are simple XML files.  There is no official\nand comprehensive specification, although MS has released whitepapers on the\nformat.  Since Excel 2016 can generate SpreadsheetML files, backsolving is\npretty straightforward.\n\n### Excel 2007+ Binary (XLSB, BIFF12)\n\nIntroduced in parallel with XLSX, the XLSB filetype combines BIFF architecture\nwith the content separation and ZIP container of XLSX.  For the most part nodes\nin an XLSX sub-file can be mapped to XLSB records in a corresponding sub-file.\n\nThe `MS-XLSB` specification covers the basics of the file format, and other\nspecifications expand on serialization of features like properties.\n\n### OpenDocument Spreadsheet (ODS/FODS) and Uniform Office Spreadsheet (UOS1/2)\n\nODS is an XML-in-ZIP format akin to XLSX while FODS is an XML format akin to\nSpreadsheetML.  Both are detailed in the OASIS standard, but tools like LO/OO\nadd undocumented extensions.\n\nUOS is a very similar format, and it comes in 2 varieties corresponding to ODS\nand FODS respectively.  For the most part, the difference between the formats\nlies in the names of tags and attributes.\n\n### Comma-Separated Values\n\nExcel CSV deviates from RFC4180 in a number of important ways.  The generated\nCSV files should generally work in Excel although they may not work in RFC4180\ncompatible readers.\n\n### HTML\n\nExcel HTML worksheets include special metadata encoded in styles.  For example,\n`mso-number-format` is a localized string containing the number format.  Despite\nthe metadata the output is valid HTML, although it does accept bare `&` symbols.\n\n## Testing\n\n`make test` will run the node-based tests.  By default it runs tests on files in\nevery supported format.  To test a specific file type, set `FMTS` to the format\nyou want to test.  Feature-specific tests are avaialble with `make test_misc`\n\n```bash\n$ make test        # run full tests\n$ make test_xls    # only use the XLS test files\n$ make test_xlsx   # only use the XLSX test files\n$ make test_xlsb   # only use the XLSB test files\n$ make test_xml    # only use the XLSB test files\n$ make test_ods    # only use the XLSB test files\n```\n\nTo enable all errors, set the environment variable `WTF=1`:\n\n```bash\n$ make test        # run full tests\n$ WTF=1 make test  # enable all error messages\n```\n\nFlow and JSHint/JSCS checks are available:\n\n```bash\n$ make lint        # JSHint and JSCS checks\n$ make flow        # make lint + Flow checking\n```\n\nTo run the in-browser tests, clone the repo for\n[oss.sheetjs.com](https://github.com/SheetJS/SheetJS.github.io) and replace\nthe xlsx.js file (then fire up the browser and go to `stress.html`):\n\n```bash\n$ cp xlsx.js ../SheetJS.github.io\n$ cd ../SheetJS.github.io\n$ simplehttpserver # or \"python -mSimpleHTTPServer\" or \"serve\"\n$ open -a Chromium.app http://localhost:8000/stress.html\n```\n### Tested Environments\n\n - NodeJS 0.8, 0.9, 0.10, 0.11, 0.12, 4.x, 5.x, 6.x, 7.x\n - IE 6/7/8/9/10/11 (IE6-9 browsers require shims for interacting with client)\n - Chrome 24+\n - Safari 6+\n - FF 18+\n\nTests utilize the mocha testing framework.  Travis-CI and Sauce Labs links:\n\n - <https://travis-ci.org/SheetJS/js-xlsx> for XLSX module in nodejs\n - <https://travis-ci.org/SheetJS/SheetJS.github.io> for XLS\\* modules\n - <https://saucelabs.com/u/sheetjs> for XLS\\* modules using Sauce Labs\n\n### Test Files\n\nTest files are housed in [another repo](https://github.com/SheetJS/test_files).\n\nRunning `make init` will refresh the `test_files` submodule and get the files.\n\n\n\n## Contributing\n\nDue to the precarious nature of the Open Specifications Promise, it is very\nimportant to ensure code is cleanroom.  Consult CONTRIBUTING.md\n\nThe xlsx.js file is constructed from the files in the `bits` subdirectory. The\nbuild script (run `make`) will concatenate the individual bits to produce the\nscript.  Before submitting a contribution, ensure that running make will produce\nthe xlsx.js file exactly.  The simplest way to test is to add the script:\n\n```bash\n$ git add xlsx.js\n$ make clean\n$ make\n$ git diff xlsx.js\n```\n\nTo produce the dist files, run `make dist`.  The dist files are updated in each\nversion release and *should not be committed between versions*.\n\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 License are reserved by the Original Author.\n\n\n## References\n\nISO/IEC 29500:2012(E) \"Information technology — Document description and processing languages — Office Open XML File Formats\"\n\nOSP-covered specifications:\n\n - [MS-XLSB]: Excel (.xlsb) Binary File Format\n - [MS-XLSX]: Excel (.xlsx) Extensions to the Office Open XML SpreadsheetML File Format\n - [MS-OE376]: Office Implementation Information for ECMA-376 Standards Support\n - [MS-CFB]: Compound File Binary File Format\n - [MS-XLS]: Excel Binary File Format (.xls) Structure Specification\n - [MS-ODATA]: Open Data Protocol (OData)\n - [MS-OFFCRYPTO]: Office Document Cryptography Structure\n - [MS-OLEDS]: Object Linking and Embedding (OLE) Data Structures\n - [MS-OLEPS]: Object Linking and Embedding (OLE) Property Set Data Structures\n - [MS-OSHARED]: Office Common Data Types and Objects Structures\n - [MS-ODRAW]: Office Drawing Binary File Format\n - [MS-ODRAWXML]: Office Drawing Extensions to Office Open XML Structure\n - [MS-OVBA]: Office VBA File Format Structure\n - [MS-CTXLS]: Excel Custom Toolbar Binary File Format\n - [MS-XLDM]: Spreadsheet Data Model File Format\n - [MS-EXSPXML3]: Excel Calculation Version 2 Web Service XML Schema\n - [XLS]: Microsoft Office Excel 97-2007 Binary File Format Specification\n\nOpen Document Format for Office Applications Version 1.2 (29 September 2011)\n\nWorksheet File Format (From Lotus) December 1984\n\n\n## Badges\n\n[![Build Status](https://saucelabs.com/browser-matrix/xlsx.svg)](https://saucelabs.com/u/xlsx)\n\n[![Build Status](https://travis-ci.org/SheetJS/js-xlsx.svg?branch=master)](https://travis-ci.org/SheetJS/js-xlsx)\n\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/js-xlsx/master.svg)](https://coveralls.io/r/SheetJS/js-xlsx?branch=master)\n\n[![NPM Downloads](https://img.shields.io/npm/dt/xlsx.svg)](https://npmjs.org/package/xlsx)\n\n[![Dependencies Status](https://david-dm.org/sheetjs/js-xlsx/status.svg)](https://david-dm.org/sheetjs/js-xlsx)\n\n[![ghit.me](https://ghit.me/badge.svg?repo=sheetjs/js-xlsx)](https://ghit.me/repo/sheetjs/js-xlsx)\n\n[![Analytics](https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/js-xlsx?pixel)](https://github.com/SheetJS/js-xlsx)\n",
  "readmeFilename": "README.md",
  "_id": "xlsx@0.9.3",
  "dist": {
    "shasum": "1eba7603ab351d09d686dc263d3bc8ea6bc40811"
  },
  "_from": "xlsx@",
  "_resolved": "https://registry.npmjs.org/xlsx/-/xlsx-0.9.3.tgz"
}
